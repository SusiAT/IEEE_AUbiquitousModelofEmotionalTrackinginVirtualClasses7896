/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.emociones;

import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.IntersectionClass;
import com.hp.hpl.jena.ontology.OntClass;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntProperty;
import com.hp.hpl.jena.ontology.OntResource;
import com.hp.hpl.jena.rdf.model.AnonId;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RSIterator;
import com.hp.hpl.jena.rdf.model.ReifiedStatement;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import static com.mycompany.emociones.NewClass1.jFileChooser1;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.log4j.BasicConfigurator;
import org.mindswap.pellet.jena.PelletReasonerFactory;
import weka.clusterers.SimpleKMeans;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.converters.CSVLoader;

/**
 *
 * @author pc
 */
public class emociones_2 extends javax.swing.JFrame {

    private MainRunnable gdt = null;
    private BotonHilo bt = null;

    /**
     * Creates new form emociones
     */
    public emociones_2() {
        initComponents();
//        filters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Cargar owl");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cargar dataset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Generar Dataset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Detener generador");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jTree1);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setText("Framework ubicuo de an√°lisis emocional en clases en linea");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setText("Emotion Recognition");

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("Action_Tendency");

        jButton5.setText("Limpiar pantalla");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(60, 60, 60))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void detallesInstancias(OntClass classMiembro, DefaultMutableTreeNode node) {
        List<? extends OntResource> lInst = classMiembro.listInstances(true).toList();
        for (OntResource ontResoInst : lInst) {
            DefaultMutableTreeNode ndIn = new DefaultMutableTreeNode("Instancia: " + ontResoInst.getLocalName());
            node.add(ndIn);
//                if(ontResource.getLocalName().equals("asc1")){
//                    System.out.println("\nclase: "+classMiembro.getLocalName()+"\n");
//                    List<Statement> dt = ontResoInst.listProperties().toList();
//                    for (int i = 0; i < dt.size(); i++) {
//                        System.out.println(i+". propiedad: "+dt.get(i));
//                    }
//                }
            Property v = modelOnto.getProperty(hasActionTendency);
            Property v2 = modelOnto.getProperty(isActionTendencyOf);
            if (ontResoInst.hasProperty(v) || ontResoInst.hasProperty(v2)) {

                if (ontResoInst.hasProperty(v)) {
                    List<Statement> prLis = ontResoInst.listProperties(v).toList();
                    for (Statement statement : prLis) {
//                                System.out.println(" \t " + "::: " + nextElement.getPredicate().getLocalName()
//                                        + " +++ " + nextElement.getResource().getLocalName());
                        DefaultMutableTreeNode ndInPr = new DefaultMutableTreeNode("Propiedad: " + statement.getPredicate().getLocalName());
                        ndIn.add(ndInPr);
                        DefaultMutableTreeNode ndInPrV = new DefaultMutableTreeNode("Instancia: " + statement.getResource().getLocalName());
                        ndInPr.add(ndInPrV);
                    }
                }
                if (ontResoInst.hasProperty(v2)) {
                    List<Statement> prLis = ontResoInst.listProperties(v2).toList();
                    for (Statement statement : prLis) {
//                                System.out.println(" \t " + "::: " + nextElement.getPredicate().getLocalName()
//                                        + " +++ " + nextElement.getResource().getLocalName());
                        DefaultMutableTreeNode ndInPr = new DefaultMutableTreeNode("Propiedad: " + statement.getPredicate().getLocalName());
                        ndIn.add(ndInPr);
                        DefaultMutableTreeNode ndInPrV = new DefaultMutableTreeNode("Instancia: " + statement.getResource().getLocalName());
                        ndInPr.add(ndInPrV);
                    }
                }
            }
        }
    }

    private DefaultMutableTreeNode recorridoRecursivo(OntClass classMiembro, DefaultMutableTreeNode node) {
        if (classMiembro.hasSubClass()) {

            detallesInstancias(classMiembro, node);

            List<OntClass> cll = classMiembro.listSubClasses(true).toList();
            for (OntClass ontClassV : cll) {
                if (!ontClassV.isComplementClass()) {
                    DefaultMutableTreeNode ndCl = new DefaultMutableTreeNode(ontClassV.getLocalName());
                    node.add(ndCl);
                    DefaultMutableTreeNode auxN = recorridoRecursivo(ontClassV, ndCl);
                } else {
                    return null;
                }
            }
            return null;

        }
        return null;
    }

    private DefaultMutableTreeNode recorrerArbol(OntClass classMiembro) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(classMiembro.getLocalName());
        detallesInstancias(classMiembro, root);
        if (classMiembro.hasSubClass() && classMiembro.isHierarchyRoot()) {
            DefaultMutableTreeNode auxN = recorridoRecursivo(classMiembro, root);
            return root;
        } else {
            return null;
        }
    }

    private DefaultTreeModel generarArbol() {
//        String IRejecting = "http://www.semanticweb.org/rabaa006/ontologies/2017/10/Affective_States_Recognition#IRejecting";
//        String Thing = "http://www.w3.org/2002/07/owl#Thing";
//        String Nothing = "http://www.w3.org/2002/07/owl#Nothing";
//        OntClass IRejectingCl =modelOnto.getOntClass(IRejecting);
//        OntClass ThingCl = modelOnto.getOntClass(Thing);
//        OntClass NothingCl = modelOnto.getOntClass(Nothing);
//            System.out.println("IRejecting - isComplementClass: \t"+IRejectingCl.isComplementClass());
//            System.out.println("IRejecting - isHierarchyRoot: \t\t"+IRejectingCl.isHierarchyRoot());
//            System.out.println("IRejecting - isOntLanguageTerm: \t"+IRejectingCl.isOntLanguageTerm());
        ExtendedIterator<OntClass> itOnClHi = modelOnto.listHierarchyRootClasses();
        OntClass rootClass = null;
        while (itOnClHi.hasNext()) {
            OntClass value = itOnClHi.next();
            rootClass = value.getSuperClass();
            break;
        }
//            System.out.println("ss: "+rootClass.getLocalName());
        return new DefaultTreeModel(recorrerArbol(rootClass));
    }

    private void preRasonador() {

        try {
            inInputStream = new FileInputStream(fileString);

            // load the ontology with its imports and no reasoning
            modelOnto = ModelFactory.createOntologyModel(PelletReasonerFactory.THE_SPEC);
            modelOnto.read(inInputStream, "RDF/XML");

            Map<String, String> NsMap = modelOnto.getNsPrefixMap();
            String Ns = NsMap.get("");
            System.out.println("NS: " + Ns);
//                if (!NsMap.isEmpty()) {
//                    for (Map.Entry<String, String> entry : NsMap.entrySet()) {
//                        System.out.println(entry.getKey() + ": -/- " + entry.getValue());
//                    }
//                }

//                ExtendedIterator<OntProperty> pr = model.listAllOntProperties();
//                int v1=1;
//                while(pr.hasNext()) {
//                    OntProperty v=pr.next();
//                    System.out.println(v1+"- pr n: "+v.getLocalName()+" - pr ns: "+v.getNameSpace());
//                    v1++;
//                }
//                List<Individual> ind = new ArrayList<Individual>();
            ExtendedIterator<OntProperty> pr = modelOnto.listOntProperties();
            hasActionTendency = null;
            isActionTendencyOf = null;
            int sl = 0;
            while (pr.hasNext()) {
                OntProperty v = pr.next();
                if (v.getLocalName().equals("hasActionTendency")) {
                    hasActionTendency = v.getURI();
                    sl++;
                };
                if (v.getLocalName().equals("isActionTendencyOf")) {
                    isActionTendencyOf = v.getURI();
                    sl++;
                }
                if (sl == 2) {
                    break;
                }
            }
            Iterator<String> inter = indStr.iterator();
            int indn = 1;
            Map<String, OntResource> m1 = new HashMap<String, OntResource>();
            Map<String, OntClass> m2 = new HashMap<String, OntClass>();
            String emotionCl = null;
            ExtendedIterator<OntClass> cl = modelOnto.listClasses();
            int sl2 = 0;
            while (cl.hasNext()) {
                OntClass element = cl.next();

                if (element.getLocalName() != null && element.getLocalName().equals("Frijda_Action_Tendency")) {
                    ExtendedIterator<OntClass> listSubCl = element.listSubClasses(true);
                    while (listSubCl.hasNext()) {
                        OntClass next = listSubCl.next();
                        m2.put(next.getLocalName(), next);
//                        if (next.getLocalName().equals("Nothing")) {
//                            StmtIterator cc = next.listProperties();
//                            System.out.println("frida: " + next.getLocalName());
//                            int h = 1;
//                            while (cc.hasNext()) {
//                                Statement element2 = cc.next();
//                                System.out.println("\t" + h + "--" + element2);
//                                h++;
//                            }
//                        }
                    }
                    sl2++;
                }
//                      System.out.println("local: "+element.getLocalName()+", uri:"+element.getURI());
                if (element.getLocalName() != null && element.getLocalName().equals("Emotion")) {
                    System.out.println("emotion cl: " + element.getURI());
                    emotionCl = element.getURI();
//                        ExtendedIterator<? extends OntResource> indv = element.listInstances(true);
//                        while (indv.hasNext()) {
//                            OntResource element2 = indv.next();
//                            m1.put(element2.getLocalName(), element2);
////                               System.out.println("tes----: "+element2.getLocalName());
//
//                        }
                    ArrayList<String> emotIndi = new ArrayList<String>(Arrays.asList(
                            "surprise", "disgust", "fear",
                            "humility", "enjoyment", "resignation",
                            "arrogance", "indifference", "shock",
                            "anger", "Interest", "desire"));
                    for (int i = 0; i < emotIndi.size(); i++) {
                        Individual emot = modelOnto.createIndividual(Ns + emotIndi.get(i), modelOnto.getResource(emotionCl));
                        m1.put(emotIndi.get(i), emot);
                    }
                    sl2++;
                }
                if (sl2 == 2) {
                    break;
                }
            }
//disgust
//neutral
//surprised
//sad
//angry
//scared
//happy
//tes .. surprise
//tes----: disgust
//tes----: fear
//tes----: humility
//tes----: enjoyment
//tes----: resignation
//tes----: arrogance
//tes----: indifference
//tes----: shock
//tes----: anger
//tes----: Interest
//tes----: desire
//frida: Being-with
//frida: Dominating
//frida: Approach
//frida: Interrupting
//frida: Submitting
//frida: Avoidance
//frida: Agonistic
//frida: Attending
//frida: Rejecting
//frida: Nonattending

            while (inter.hasNext()) {
                String element = inter.next();

                Property v2 = modelOnto.createProperty(isActionTendencyOf);
//                    
                switch (element) {
                    case "disgust":
                        Individual IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Rejecting").getURI()));
                        IndivDes.addProperty(v2, m1.get("disgust"));
                        break;
                    case "neutral":
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Submitting").getURI()));
                        IndivDes.addProperty(v2, m1.get("humility"));
                        IndivDes.addProperty(v2, m1.get("resignation"));
                        break;
                    case "scared":
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Avoidance").getURI()));
                        IndivDes.addProperty(v2, m1.get("fear"));
                        break;
                    case "surprised":
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Interrupting").getURI()));
                        IndivDes.addProperty(v2, m1.get("shock"));
                        IndivDes.addProperty(v2, m1.get("surprise"));
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Nonattending").getURI()));
                        IndivDes.addProperty(v2, m1.get("indifference"));
                        break;
                    case "sad":
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Approach").getURI()));
                        IndivDes.addProperty(v2, m1.get("desire"));
                        break;
                    case "angry":
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Agonistic").getURI()));
                        IndivDes.addProperty(v2, m1.get("anger"));
                        break;
                    case "happy":
                        IndivDes = modelOnto.createIndividual(Ns + element + indn,
                                modelOnto.getResource(m2.get("Being-with").getURI()));
                        IndivDes.addProperty(v2, m1.get("enjoyment"));
                        break;

                }
//                    Individual IndivDes = 

//                    model.add
//                    System.out.println("individuo: "+IndivDes.toString()+" nombre: "+element);
//                    ind.add(IndivDes);
//                    StmtIterator j = IndivDes.listProperties();
//                    int h = 1;
//                    while (j.hasNext()) {
//                        Statement element2 = j.next();
//                        System.out.println("\t" + h + "--" + element2);
//                        h++;
//                    }
//                    System.out.println(IndivDes.listProperties());
                indn++;
            }
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }

    private void postRazonador() {
        try {
            // load the model to the reasoner
            modelOnto.prepare();

            //ExtendedIterator<Individual> t = modelOnto.listIndividuals();
//            int i = 1;
            //while (t.hasNext()) {
            //Individual element = (Individual) t.next();
//                if (element.getOntClass() != null && element.getOntClass().getLocalName() != null) {
//                    System.out.println(i + ": " + element.getOntClass(true).getLocalName()
//                            + " -n- " + element.getLocalName()
//                            + " -url- " + element.getURI());
//                    Property v = modelOnto.createProperty(hasActionTendency);
//                    Property v2 = modelOnto.createProperty(isActionTendencyOf);
//                    if (element.hasProperty(v) || element.hasProperty(v2)) {
//                        if (element.hasProperty(v)) {
//                            StmtIterator it1 = element.listProperties(v);
//                            while (it1.hasNext()) {
//                                Statement nextElement = it1.next();
//                                System.out.println(" \t " + "::: " + nextElement.getPredicate().getLocalName()
//                                        + " +++ " + nextElement.getResource().getLocalName());
//                            }
//                        }
//                        if (element.hasProperty(v2)) {
//                            StmtIterator it1 = element.listProperties(v2);
//                            while (it1.hasNext()) {
//                                Statement nextElement = it1.next();
//                                System.out.println(" \t " + "::: " + nextElement.getPredicate().getLocalName()
//                                        + " +++ " + nextElement.getResource().getLocalName());
//                            }
//                        }
//
//                    }
//                        StmtIterator j = element.listProperties();
//                        int h = 1;
//                        while (j.hasNext()) {
//                            Statement element2 = j.next();
//                            System.out.println("\t" + h + "--" + element2);
//                            h++;
//                        }
//                }
//                i++;
            //}
            DefaultTreeModel arbolModelo = generarArbol();
            jTree1.setModel(arbolModelo);

            String newName = FilenameUtils.removeExtension(fileArchivo.getName()) + " - generada";
            String ext = FilenameUtils.getExtension(fileArchivo.getName());
            //System.out.println(newName + "." + ext + " - " + file2.getParent());
            //FileUtils.copyFile(file2, new File(file2.getParent()+"/"+newName + "." + ext));
            generarNFileP = fileArchivo.getParent() + "/" + newName + "." + ext;
            FileOutputStream outOutputStream = new FileOutputStream(new File(generarNFileP));
            modelOnto.write(outOutputStream, "RDF/XML");

            modelOnto.close();
            inInputStream.close();
            outOutputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String fileString = "";
    private File fileArchivo = null;
    private String generarNFileP;
    private InputStream inInputStream;
    private OntModel modelOnto;
    private String hasActionTendency = null;
    private String isActionTendencyOf = null;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //BasicConfigurator.configure();

        FileFilter[] fltList = jFileChooser1.getChoosableFileFilters();
        if (fltList != null && fltList.length != 1) {
            for (int i = 0; i < fltList.length; i++) {
                jFileChooser1.removeChoosableFileFilter(fltList[i]);
            }
        }
        FileNameExtensionFilter flt1 = new FileNameExtensionFilter("OWL", "owl");
        FileNameExtensionFilter flt2 = new FileNameExtensionFilter("RDF", "rdf");
        jFileChooser1.addChoosableFileFilter(flt2);
        jFileChooser1.setFileFilter(flt1);
        int returnValue = jFileChooser1.showOpenDialog(this);
        if (returnValue == jFileChooser1.APPROVE_OPTION) {
            fileString = jFileChooser1.getSelectedFile().getAbsolutePath();
            fileArchivo = jFileChooser1.getSelectedFile();
            JOptionPane.showMessageDialog(rootPane, "archivo cargado:\n" + fileString + "\niniciando genercion del archivo OWL");
            inInputStream = null;
            generarNFileP = null;
            /*
            --i metodos---
             */
            preRasonador();
            postRazonador();
            /*
            --f metodos---
             */
            JOptionPane.showMessageDialog(rootPane, "archivo OWL generado en: \n" + generarNFileP);
        }
        jButton1.setEnabled(false);
        jFileChooser1.setSelectedFile(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void simpleKmamisSi() {

        try {
            JOptionPane.showMessageDialog(rootPane, "iniciando K-means");
            simpleKmamis();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "fin  K-means");
//        }
        jFileChooser1.setSelectedFile(null);
//        jButton1.setEnabled(true);

    }

    private void simpleKmamis() {
        try {
            /*
                FileReader f = null;
                try {
                indStr = new ArrayList<String>();
                String v;
                String file = jFileChooser1.getSelectedFile().getAbsolutePath();
                f = new FileReader(file);
                BufferedReader b = new BufferedReader(f);
                int i = 1;
                while ((v = b.readLine()) != null) {
                String[] d = v.split(";");
                if (d.length > 0 && !d[0].isEmpty()) {
                indStr.add(d[0]);
                //                        System.out.println(indStr.get(i-1));
                i++;
                }
                }
                b.close();
                
                } catch (FileNotFoundException ex) {
                Logger.getLogger(emociones_2.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(emociones_2.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                try {
                f.close();
                } catch (IOException ex) {
                Logger.getLogger(emociones_2.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                //*/
            int K = 3;
            indStr = new ArrayList<String>();
            CSVLoader loader = new CSVLoader();

            loader.setSource(jFileChooser1.getSelectedFile());

            Instances data = loader.getDataSet();
            // Create the KMeans object.
            SimpleKMeans kmeans = new SimpleKMeans();
            kmeans.setCanopyMaxNumCanopiesToHoldInMemory(100);
            kmeans.setCanopyMinimumCanopyDensity(2.0);
            kmeans.setCanopyPeriodicPruningRate(10000);
            kmeans.setCanopyT1(-1.25);
            kmeans.setCanopyT2(-1.0);
            EuclideanDistance Euclide = new EuclideanDistance();
            Euclide.setAttributeIndices("first-last");
            kmeans.setDistanceFunction(Euclide);
            kmeans.setMaxIterations(500);
            kmeans.setNumExecutionSlots(1);
            kmeans.setSeed(10);
            kmeans.setNumClusters(K);
            kmeans.setInitializationMethod(new SelectedTag("Random", SimpleKMeans.TAGS_SELECTION));
            //kmeans.setPreserveInstancesOrder(true);

            // Perform K-Means clustering.
            kmeans.buildClusterer(data);

            // print out the cluster centroids
            Instances centroids = kmeans.getClusterCentroids();
            for (int i = 0; i < K; i++) {
                indStr.add(centroids.instance(i).stringValue(0));

            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void simpleKmamisNo() {

        JOptionPane.showMessageDialog(rootPane, "iniciando K-means");
        simpleKmamis();
        JOptionPane.showMessageDialog(rootPane, "fin  K-means");

    }

    private FileNameExtensionFilter CSVfiltro() {
        FileFilter[] fltList = jFileChooser1.getChoosableFileFilters();
        if (fltList != null && fltList.length != 1) {
            for (int i = 0; i < fltList.length; i++) {
                jFileChooser1.removeChoosableFileFilter(fltList[i]);
            }
        }
        FileNameExtensionFilter flt = new FileNameExtensionFilter("CSV", "csv");
        return flt;
    }

    public List<String> indStr = null;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//        jTextArea1.setText(null);
        if (jFileChooser1.getSelectedFile() != null) {
            jButton1.setEnabled(false);
            FileNameExtensionFilter flt = CSVfiltro();
            File fl = jFileChooser1.getSelectedFile();
            jFileChooser1.setFileFilter(flt);
            jFileChooser1.setSelectedFile(fl);
            String ext = FilenameUtils.getExtension(jFileChooser1.getSelectedFile().getName());
            int returnValue = ext.toLowerCase().equals("csv") ? jFileChooser1.APPROVE_OPTION : jFileChooser1.CANCEL_OPTION;
            //System.out.println("ext.toLowerCase: " + ext.toLowerCase()
            //+ ", returnValue: " + returnValue
            //+ ", jFileChooser1.APPROVE_OPTION: " + jFileChooser1.APPROVE_OPTION);
            if (returnValue == jFileChooser1.APPROVE_OPTION) {
                simpleKmamisSi();
            }
//        jFileChooser1.setSelectedFile(null);
            jButton1.setEnabled(true);

        } else {
            jButton1.setEnabled(false);
            FileNameExtensionFilter flt = CSVfiltro();
            jFileChooser1.setFileFilter(flt);
            int returnValue = jFileChooser1.showOpenDialog(this);
            if (returnValue == jFileChooser1.APPROVE_OPTION) {
                simpleKmamisNo();
                jButton1.setEnabled(true);
            } else {
                jButton1.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    class interna extends MetodosExternos {

        @Override
        public void cargarFromHilo() {
            //        jTextArea1.setText(null);
            if (jFileChooser1.getSelectedFile() != null) {
                jButton1.setEnabled(false);
                FileNameExtensionFilter flt = CSVfiltro();
                File fl = jFileChooser1.getSelectedFile();
                jFileChooser1.setFileFilter(flt);
                jFileChooser1.setSelectedFile(fl);
                String ext = FilenameUtils.getExtension(jFileChooser1.getSelectedFile().getName());
                int returnValue = ext.toLowerCase().equals("csv") ? jFileChooser1.APPROVE_OPTION : jFileChooser1.CANCEL_OPTION;
                //System.out.println("ext.toLowerCase: " + ext.toLowerCase()
                //+ ", returnValue: " + returnValue
                //+ ", jFileChooser1.APPROVE_OPTION: " + jFileChooser1.APPROVE_OPTION);
                if (returnValue == jFileChooser1.APPROVE_OPTION) {
                    simpleKmamisSi();
                }
//        jFileChooser1.setSelectedFile(null);
//            jButton1.setEnabled(true);

            }
        }

    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea1.setText(null);
        jButton3.setEnabled(false);
        jButton2.setEnabled(false);
        jButton4.setEnabled(true);
        jButton1.setEnabled(false);
        gdt = new MainRunnable(jFileChooser1, jButton3, jTextArea1, rootPane);
        gdt.setCorre(true);
        gdt.start();
        bt = new BotonHilo(new JButton[]{jButton3, jButton1, jButton2}, jButton2, gdt, jButton1, new interna());
        bt.setBtStop(jButton4);
        bt.start();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        gdt.thStop();
        jButton4.setEnabled(false);


    }//GEN-LAST:event_jButton4ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        jTree1.setModel(null);
    }//GEN-LAST:event_formComponentShown

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jTextArea1.setText(null);
    }//GEN-LAST:event_jButton5ActionPerformed

    public void filters() {
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("CSV", "csv"));
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("RDF", "rdf"));
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("OWL", "owl"));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(emociones_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(emociones_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(emociones_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(emociones_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new emociones_2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
